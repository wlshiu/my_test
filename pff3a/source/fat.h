/**
 * Copyright (c) 2025 Wei-Lun Hsu. All Rights Reserved.
 */
/** @file fat.h
 *
 * @author Wei-Lun Hsu
 * @version 0.1
 * @date 2025/09/17
 * @license
 * @description
 */

#ifndef __fat_H_wUO3gfAm_lvxz_HDM8_s6i3_uAB7otV293BX__
#define __fat_H_wUO3gfAm_lvxz_HDM8_s6i3_uAB7otV293BX__

#ifdef __cplusplus
extern "C" {
#endif

#include <stdint.h>
//=============================================================================
//                  Constant Definition
//=============================================================================

//=============================================================================
//                  Macro Definition
//=============================================================================

//=============================================================================
//                  Structure Definition
//=============================================================================
#if 0
typedef struct _DBR
{
    uint8_t BS_jmpBoot[3];          // offset: 0  Jump Code + NOP
    uint8_t BS_OEMName[8];          // offset: 3  OEM Name

    uint8_t BPB_BytesPerSec[2];     // offset:11  Bytes Per Sector
    uint8_t BPB_SecPerClus;         // offset:13  Sectors Per Cluster
    uint8_t BPB_RsvdSecCnt[2];      // offset:14  Reserved Sector Count
    uint8_t BPB_NumFATs;            // offset:16  Number of File Allocation Tables
    uint8_t BPB_RootEntCnt[2];      // offset:17  Max number of Root Entries (FAT32=0)
    uint8_t BPB_TotSec16[2];        // offset:19  FAT16 Total Sectors (FAT32=0)
    uint8_t BPB_Media;              // offset:21  Media Descriptor
    uint8_t BPB_FATSz16[2];         // offset:22  Sectors Per FAT16 (FAT32=0)
    uint8_t BPB_SecPerTrk[2];       // offset:24  Sectors Per Track
    uint8_t BPB_NumHeads[2];        // offset:26  Number of Heads
    uint8_t BPB_HiddSec[4];         // offset:28  Number of Hidden Sectors
    uint8_t BPB_TotSec32[4];        // offset:32  FAT32 Number of Sectors in Partition
    uint8_t BPB_FATSz32[4];         // offset:36  Number of Sectors Per FAT
    uint8_t BPB_ExtFlags[2];        // offset:40  FAT32 Flags
    uint8_t BPB_FSVer[2];           // offset:42  FAT32 Version of FAT32 Drive
    uint8_t BPB_RootClus[4];        // offset:44  Cluster Number of the Startof the Root Directory
    uint8_t FSInfo[2];              // offset:48  Sector Number of the FileSystem Information Sector (FSINFO)
    uint8_t BPB_BkBootSec[2];       // offset:50  Sector Number of the BackupBoot Sector  (def: 6)
    uint8_t BPB_Reserved[12];       // offset:52  Reserved
    uint8_t BS_DrvNum;              // offset:64  Logical Drive Number of Partition
    uint8_t BS_Reserved1;           // offset:65  Unused
    uint8_t BS_BootSig;             // offset:66  Extended Signature
    uint8_t BS_VolID[4];            // offset:67  Serial Number of Partition
    uint8_t BS_FilSysType[11];      // offset:71  Volume Name of Partition
    uint8_t BS_FilSysType1[8];      // offset:82  FAT Name ("FAT32/FAT16/FAT12")
} dbr_t;
#else

/**
 *  DBR (Dos Boot Record)
 */
typedef struct _DBR {
    uint8_t    jmp_boot[3];        /* offset: 0     Bootstrap code */
    char       system_id[8];       /* offset: 3     Name of fs vendor */
    uint8_t    sector_size[2];     /* offset:11     Bytes of a sector */
    uint8_t    cluster_size;       /* offset:13     Sectors of a cluster */
    uint16_t   reserved;           /* offset:14     Number of reserved sectors */
    uint8_t    fats;               /* offset:16     Number of FAT table */
    uint8_t    dir_entries[2];     /* offset:17     Number of root directory entries, FAT16 only */
    uint8_t    sectors[2];         /* offset:19     Number of sectors, FAT16 use */
    uint8_t    media;              /* offset:21     Media type */
    uint16_t   fat_length;         /* offset:22     Sectors/FAT */
    uint16_t   secs_track;         /* offset:24     Sectors/track */
    uint16_t   heads;              /* offset:26     Number of heads */
    uint32_t   hidden;             /* offset:28     Number of hidden sectors */
    uint32_t   total_sect;         /* offset:32     Number of sectors (if sectors == 0) */

    /* FAT32 only */
    uint32_t   fat32_length;       /* Sectors of a FAT table */
    uint16_t   flags;              /* Bit 8: fat mirroring, low 4: active fat */
    uint8_t    version[2];         /* Filesystem version */
    uint32_t   root_cluster;       /* First cluster in root directory */
    uint16_t   info_sector;        /* Filesystem info sector */
    uint16_t   backup_boot;        /* Backup boot sector */
    uint16_t   reserved2[6];       /* Unused */
} dbr_t;
#endif
//=============================================================================
//                  Global Data Definition
//=============================================================================
static uint8_t _dbr[512] =
{
    0xEB, 0x58, 0x90, 0x4D, 0x53, 0x44, 0x4F, 0x53, 0x35, 0x2E, 0x30, 0x00, 0x02, 0x08, 0x20, 0x00,
    0x02, 0x00, 0x00, 0x00, 0x00, 0xF8, 0x00, 0x00, 0x3F, 0x00, 0xFF, 0x00, 0x3F, 0x00, 0x00, 0x00,
    0xC3, 0xDD, 0x1F, 0x00, 0xF4, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x00,
    0x01, 0x00, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x80, 0x00, 0x29, 0xEE, 0x0C, 0x09, 0x00, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20,
    0x20, 0x20, 0x46, 0x41, 0x54, 0x33, 0x32, 0x20, 0x20, 0x20, 0x33, 0xC9, 0x8E, 0xD1, 0xBC, 0xF4,
    0x7B, 0x8E, 0xC1, 0x8E, 0xD9, 0xBD, 0x00, 0x7C, 0x88, 0x4E, 0x02, 0x8A, 0x56, 0x40, 0xB4, 0x08,
    0xCD, 0x13, 0x73, 0x05, 0xB9, 0xFF, 0xFF, 0x8A, 0xF1, 0x66, 0x0F, 0xB6, 0xC6, 0x40, 0x66, 0x0F,
    0xB6, 0xD1, 0x80, 0xE2, 0x3F, 0xF7, 0xE2, 0x86, 0xCD, 0xC0, 0xED, 0x06, 0x41, 0x66, 0x0F, 0xB7,
    0xC9, 0x66, 0xF7, 0xE1, 0x66, 0x89, 0x46, 0xF8, 0x83, 0x7E, 0x16, 0x00, 0x75, 0x38, 0x83, 0x7E,
    0x2A, 0x00, 0x77, 0x32, 0x66, 0x8B, 0x46, 0x1C, 0x66, 0x83, 0xC0, 0x0C, 0xBB, 0x00, 0x80, 0xB9,
    0x01, 0x00, 0xE8, 0x2B, 0x00, 0xE9, 0x48, 0x03, 0xA0, 0xFA, 0x7D, 0xB4, 0x7D, 0x8B, 0xF0, 0xAC,
    0x84, 0xC0, 0x74, 0x17, 0x3C, 0xFF, 0x74, 0x09, 0xB4, 0x0E, 0xBB, 0x07, 0x00, 0xCD, 0x10, 0xEB,
    0xEE, 0xA0, 0xFB, 0x7D, 0xEB, 0xE5, 0xA0, 0xF9, 0x7D, 0xEB, 0xE0, 0x98, 0xCD, 0x16, 0xCD, 0x19,
    0x66, 0x60, 0x66, 0x3B, 0x46, 0xF8, 0x0F, 0x82, 0x4A, 0x00, 0x66, 0x6A, 0x00, 0x66, 0x50, 0x06,
    0x53, 0x66, 0x68, 0x10, 0x00, 0x01, 0x00, 0x80, 0x7E, 0x02, 0x00, 0x0F, 0x85, 0x20, 0x00, 0xB4,
    0x41, 0xBB, 0xAA, 0x55, 0x8A, 0x56, 0x40, 0xCD, 0x13, 0x0F, 0x82, 0x1C, 0x00, 0x81, 0xFB, 0x55,
    0xAA, 0x0F, 0x85, 0x14, 0x00, 0xF6, 0xC1, 0x01, 0x0F, 0x84, 0x0D, 0x00, 0xFE, 0x46, 0x02, 0xB4,
    0x42, 0x8A, 0x56, 0x40, 0x8B, 0xF4, 0xCD, 0x13, 0xB0, 0xF9, 0x66, 0x58, 0x66, 0x58, 0x66, 0x58,
    0x66, 0x58, 0xEB, 0x2A, 0x66, 0x33, 0xD2, 0x66, 0x0F, 0xB7, 0x4E, 0x18, 0x66, 0xF7, 0xF1, 0xFE,
    0xC2, 0x8A, 0xCA, 0x66, 0x8B, 0xD0, 0x66, 0xC1, 0xEA, 0x10, 0xF7, 0x76, 0x1A, 0x86, 0xD6, 0x8A,
    0x56, 0x40, 0x8A, 0xE8, 0xC0, 0xE4, 0x06, 0x0A, 0xCC, 0xB8, 0x01, 0x02, 0xCD, 0x13, 0x66, 0x61,
    0x0F, 0x82, 0x54, 0xFF, 0x81, 0xC3, 0x00, 0x02, 0x66, 0x40, 0x49, 0x0F, 0x85, 0x71, 0xFF, 0xC3,
    0x4E, 0x54, 0x4C, 0x44, 0x52, 0x20, 0x20, 0x20, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0D, 0x0A, 0x52, 0x65,
    0x6D, 0x6F, 0x76, 0x65, 0x20, 0x64, 0x69, 0x73, 0x6B, 0x73, 0x20, 0x6F, 0x72, 0x20, 0x6F, 0x74,
    0x68, 0x65, 0x72, 0x20, 0x6D, 0x65, 0x64, 0x69, 0x61, 0x2E, 0xFF, 0x0D, 0x0A, 0x44, 0x69, 0x73,
    0x6B, 0x20, 0x65, 0x72, 0x72, 0x6F, 0x72, 0xFF, 0x0D, 0x0A, 0x50, 0x72, 0x65, 0x73, 0x73, 0x20,
    0x61, 0x6E, 0x79, 0x20, 0x6B, 0x65, 0x79, 0x20, 0x74, 0x6F, 0x20, 0x72, 0x65, 0x73, 0x74, 0x61,
    0x72, 0x74, 0x0D, 0x0A, 0x00, 0x00, 0x00, 0x00, 0x00, 0xAC, 0xCB, 0xD8, 0x00, 0x00, 0x55, 0xAA
};
//=============================================================================
//                  Private Function Definition
//=============================================================================

//=============================================================================
//                  Public Function Definition
//=============================================================================

#ifdef __cplusplus
}
#endif

#endif
