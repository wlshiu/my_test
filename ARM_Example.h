/*
 * ARM Limited (ARM) is supplying this software for use with Cortex-M
 * processor based microcontroller, but can be equally used for other
 * suitable processor architectures. This file can be freely distributed.
 * Modifications to this file shall be clearly marked.
 *
 * THIS SOFTWARE IS PROVIDED "AS IS". NO WARRANTIES, WHETHER EXPRESS, IMPLIED
 * OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE APPLY TO THIS SOFTWARE.
 * ARM SHALL NOT, IN ANY CIRCUMSTANCES, BE LIABLE FOR SPECIAL, INCIDENTAL, OR
 * CONSEQUENTIAL DAMAGES, FOR ANY REASON WHATSOEVER.
 *
 * @file     ARM_Example.h
 * @brief    CMSIS HeaderFile
 * @version  1.2
 * @date     06. September 2025
 * @note     Generated by SVDConv V3.3.25 on Saturday, 06.09.2025 00:35:36
 *           from File './ARM_Example.svd',
 *           last modified on Friday, 05.09.2025 16:09:22
 */



/** @addtogroup ARM Ltd.
  * @{
  */


/** @addtogroup ARM_Example
  * @{
  */


#ifndef ARM_EXAMPLE_H
#define ARM_EXAMPLE_H

#ifdef __cplusplus
extern "C" {
#endif


/** @addtogroup Configuration_of_CMSIS
  * @{
  */



/* =========================================================================================================================== */
/* ================                                Interrupt Number Definition                                ================ */
/* =========================================================================================================================== */

typedef enum {
/* =======================================  ARM Cortex-M3 Specific Interrupt Numbers  ======================================== */
  Reset_IRQn                = -15,              /*!< -15  Reset Vector, invoked on Power up and warm reset                     */
  NonMaskableInt_IRQn       = -14,              /*!< -14  Non maskable Interrupt, cannot be stopped or preempted               */
  HardFault_IRQn            = -13,              /*!< -13  Hard Fault, all classes of Fault                                     */
  MemoryManagement_IRQn     = -12,              /*!< -12  Memory Management, MPU mismatch, including Access Violation
                                                     and No Match                                                              */
  BusFault_IRQn             = -11,              /*!< -11  Bus Fault, Pre-Fetch-, Memory Access Fault, other address/memory
                                                     related Fault                                                             */
  UsageFault_IRQn           = -10,              /*!< -10  Usage Fault, i.e. Undef Instruction, Illegal State Transition        */
  SVCall_IRQn               =  -5,              /*!< -5 System Service Call via SVC instruction                                */
  DebugMonitor_IRQn         =  -4,              /*!< -4 Debug Monitor                                                          */
  PendSV_IRQn               =  -2,              /*!< -2 Pendable request for system service                                    */
  SysTick_IRQn              =  -1,              /*!< -1 System Tick Timer                                                      */
/* ========================================  ARM_Example Specific Interrupt Numbers  ========================================= */
  TIMER0_IRQn               =   0,              /*!< 0  Timer 0 interrupt                                                      */
  TIMER1_IRQn               =   4,              /*!< 4  Timer 2 interrupt                                                      */
  TIMER2_IRQn               =   6               /*!< 6  Timer 2 interrupt                                                      */
} IRQn_Type;



/* =========================================================================================================================== */
/* ================                           Processor and Core Peripheral Section                           ================ */
/* =========================================================================================================================== */

/* ===========================  Configuration of the ARM Cortex-M3 Processor and Core Peripherals  =========================== */
#define __CM3_REV                 0x0100U       /*!< CM3 Core Revision                                                         */
#define __NVIC_PRIO_BITS               3        /*!< Number of Bits used for Priority Levels                                   */
#define __Vendor_SysTickConfig         0        /*!< Set to 1 if different SysTick Config is used                              */
#define __MPU_PRESENT                  1        /*!< MPU present                                                               */
#define __FPU_PRESENT                  0        /*!< FPU present                                                               */


/** @} */ /* End of group Configuration_of_CMSIS */

//#include "core_cm3.h"                           /*!< ARM Cortex-M3 processor and core peripherals                              */
//#include "system_ARM_Example.h"                 /*!< ARM_Example System                                                        */

#ifndef __IM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __IM   __I
#endif
#ifndef __OM                                    /*!< Fallback for older CMSIS versions                                         */
  #define __OM   __O
#endif
#ifndef __IOM                                   /*!< Fallback for older CMSIS versions                                         */
  #define __IOM  __IO
#endif


/* ========================================  Start of section using anonymous unions  ======================================== */


/* =========================================================================================================================== */
/* ================                            Device Specific Peripheral Section                             ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */


/**
  * @brief 32 Timer / Counter, counting up or down from different sources (TIMER0)
  */

typedef struct {                                /*!< (@ 0x40010000) TIMER0 Structure                                           */

  union {
    __IOM uint32_t CR;                          /*!< (@ 0x00000000) Control Register                                           */

    struct {
      __IOM uint32_t EN         : 1;            /*!< [0..0] Enable                                                             */
      __OM  uint32_t RST        : 1;            /*!< [1..1] Reset Timer                                                        */
      __IOM uint32_t CNT        : 2;            /*!< [3..2] Counting direction                                                 */
      __IOM uint32_t MODE       : 3;            /*!< [6..4] Operation Mode                                                     */
      __IOM uint32_t PSC        : 1;            /*!< [7..7] Use Prescaler                                                      */
      __IOM uint32_t CNTSRC     : 4;            /*!< [11..8] Timer / Counter Source Divider                                    */
      __IOM uint32_t CAPSRC     : 4;            /*!< [15..12] Timer / Counter Capture Source                                   */
      __IOM uint32_t CAPEDGE    : 2;            /*!< [17..16] Capture Edge, select which Edge should result in a
                                                     counter increment or decrement                                            */
      __IM  uint32_t            : 2;
      __IOM uint32_t TRGEXT     : 2;            /*!< [21..20] Triggers an other Peripheral                                     */
      __IM  uint32_t            : 2;
      __IOM uint32_t RELOAD     : 2;            /*!< [25..24] Select RELOAD Register n to reload Timer on condition            */
      __IOM uint32_t IDR        : 2;            /*!< [27..26] Selects, if Reload Register number is incremented,
                                                     decremented or not modified                                               */
      __IM  uint32_t            : 3;
      __IOM uint32_t S          : 1;            /*!< [31..31] Starts and Stops the Timer / Counter                             */
    } CR_b;
  } ;

  union {
    __IOM uint16_t SR;                          /*!< (@ 0x00000004) Status Register                                            */

    struct {
      __IM  uint16_t RUN        : 1;            /*!< [0..0] Shows if Timer is running or not                                   */
      __IM  uint16_t            : 7;
      __IOM uint16_t MATCH      : 1;            /*!< [8..8] Shows if the MATCH was hit                                         */
      __IOM uint16_t UN         : 1;            /*!< [9..9] Shows if an underflow occured. This flag is sticky                 */
      __IOM uint16_t OV         : 1;            /*!< [10..10] Shows if an overflow occured. This flag is sticky                */
      __IM  uint16_t            : 1;
      __IM  uint16_t RST        : 1;            /*!< [12..12] Shows if Timer is in RESET state                                 */
      __IM  uint16_t            : 1;
      __IM  uint16_t RELOAD     : 2;            /*!< [15..14] Shows the currently active RELOAD Register                       */
    } SR_b;
  } ;
  __IM  uint16_t  RESERVED;
  __IM  uint32_t  RESERVED1[2];

  union {
    __IOM uint16_t INT;                         /*!< (@ 0x00000010) Interrupt Register                                         */

    struct {
      __IOM uint16_t EN         : 1;            /*!< [0..0] Interrupt Enable                                                   */
      __IM  uint16_t            : 3;
      __IOM uint16_t MODE       : 3;            /*!< [6..4] Interrupt Mode, selects on which condition the Timer
                                                     should generate an Interrupt                                              */
    } INT_b;
  } ;
  __IM  uint16_t  RESERVED2;
  __IM  uint32_t  RESERVED3[3];
  __IOM uint32_t  COUNT;                        /*!< (@ 0x00000020) The Counter Register reflects the actual Value
                                                                    of the Timer/Counter                                       */
  __IOM uint32_t  MATCH;                        /*!< (@ 0x00000024) The Match Register stores the compare Value for
                                                                    the MATCH condition                                        */

  union {
    __IM  uint32_t PRESCALE_RD;                 /*!< (@ 0x00000028) The Prescale Register stores the Value for the
                                                                    prescaler. The cont event gets divided by
                                                                    this value                                                 */
    __OM  uint32_t PRESCALE_WR;                 /*!< (@ 0x00000028) The Prescale Register stores the Value for the
                                                                    prescaler. The cont event gets divided by
                                                                    this value                                                 */
  };
  __IM  uint32_t  RESERVED4[9];
  __IOM uint32_t  RELOAD[4];                    /*!< (@ 0x00000050) The Reload Register stores the Value the COUNT
                                                                    Register gets reloaded on a when a condition
                                                                    was met.                                                   */
} TIMER0_Type;                                  /*!< Size = 96 (0x60)                                                          */


/** @} */ /* End of group Device_Peripheral_peripherals */


/* =========================================================================================================================== */
/* ================                          Device Specific Peripheral Address Map                           ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_peripheralAddr
  * @{
  */

#define TIMER0_BASE                 0x40010000UL
#define TIMER1_BASE                 0x40010100UL
#define TIMER2_BASE                 0x40010200UL

/** @} */ /* End of group Device_Peripheral_peripheralAddr */


/* =========================================================================================================================== */
/* ================                                  Peripheral declaration                                   ================ */
/* =========================================================================================================================== */


/** @addtogroup Device_Peripheral_declaration
  * @{
  */

#define TIMER0                      ((TIMER0_Type*)            TIMER0_BASE)
#define TIMER1                      ((TIMER0_Type*)            TIMER1_BASE)
#define TIMER2                      ((TIMER0_Type*)            TIMER2_BASE)

/** @} */ /* End of group Device_Peripheral_declaration */


/* =========================================  End of section using anonymous unions  ========================================= */


/* =========================================================================================================================== */
/* ================                                Pos/Mask Peripheral Section                                ================ */
/* =========================================================================================================================== */


/** @addtogroup PosMask_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
#define TIMER0_CR_EN_Pos                  (0UL)                     /*!< EN (Bit 0)                                            */
#define TIMER0_CR_EN_Msk                  (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TIMER0_CR_RST_Pos                 (1UL)                     /*!< RST (Bit 1)                                           */
#define TIMER0_CR_RST_Msk                 (0x2UL)                   /*!< RST (Bitfield-Mask: 0x01)                             */
#define TIMER0_CR_CNT_Pos                 (2UL)                     /*!< CNT (Bit 2)                                           */
#define TIMER0_CR_CNT_Msk                 (0xcUL)                   /*!< CNT (Bitfield-Mask: 0x03)                             */
#define TIMER0_CR_MODE_Pos                (4UL)                     /*!< MODE (Bit 4)                                          */
#define TIMER0_CR_MODE_Msk                (0x70UL)                  /*!< MODE (Bitfield-Mask: 0x07)                            */
#define TIMER0_CR_PSC_Pos                 (7UL)                     /*!< PSC (Bit 7)                                           */
#define TIMER0_CR_PSC_Msk                 (0x80UL)                  /*!< PSC (Bitfield-Mask: 0x01)                             */
#define TIMER0_CR_CNTSRC_Pos              (8UL)                     /*!< CNTSRC (Bit 8)                                        */
#define TIMER0_CR_CNTSRC_Msk              (0xf00UL)                 /*!< CNTSRC (Bitfield-Mask: 0x0f)                          */
#define TIMER0_CR_CAPSRC_Pos              (12UL)                    /*!< CAPSRC (Bit 12)                                       */
#define TIMER0_CR_CAPSRC_Msk              (0xf000UL)                /*!< CAPSRC (Bitfield-Mask: 0x0f)                          */
#define TIMER0_CR_CAPEDGE_Pos             (16UL)                    /*!< CAPEDGE (Bit 16)                                      */
#define TIMER0_CR_CAPEDGE_Msk             (0x30000UL)               /*!< CAPEDGE (Bitfield-Mask: 0x03)                         */
#define TIMER0_CR_TRGEXT_Pos              (20UL)                    /*!< TRGEXT (Bit 20)                                       */
#define TIMER0_CR_TRGEXT_Msk              (0x300000UL)              /*!< TRGEXT (Bitfield-Mask: 0x03)                          */
#define TIMER0_CR_RELOAD_Pos              (24UL)                    /*!< RELOAD (Bit 24)                                       */
#define TIMER0_CR_RELOAD_Msk              (0x3000000UL)             /*!< RELOAD (Bitfield-Mask: 0x03)                          */
#define TIMER0_CR_IDR_Pos                 (26UL)                    /*!< IDR (Bit 26)                                          */
#define TIMER0_CR_IDR_Msk                 (0xc000000UL)             /*!< IDR (Bitfield-Mask: 0x03)                             */
#define TIMER0_CR_S_Pos                   (31UL)                    /*!< S (Bit 31)                                            */
#define TIMER0_CR_S_Msk                   (0x80000000UL)            /*!< S (Bitfield-Mask: 0x01)                               */
/* ==========================================================  SR  =========================================================== */
#define TIMER0_SR_RUN_Pos                 (0UL)                     /*!< RUN (Bit 0)                                           */
#define TIMER0_SR_RUN_Msk                 (0x1UL)                   /*!< RUN (Bitfield-Mask: 0x01)                             */
#define TIMER0_SR_MATCH_Pos               (8UL)                     /*!< MATCH (Bit 8)                                         */
#define TIMER0_SR_MATCH_Msk               (0x100UL)                 /*!< MATCH (Bitfield-Mask: 0x01)                           */
#define TIMER0_SR_UN_Pos                  (9UL)                     /*!< UN (Bit 9)                                            */
#define TIMER0_SR_UN_Msk                  (0x200UL)                 /*!< UN (Bitfield-Mask: 0x01)                              */
#define TIMER0_SR_OV_Pos                  (10UL)                    /*!< OV (Bit 10)                                           */
#define TIMER0_SR_OV_Msk                  (0x400UL)                 /*!< OV (Bitfield-Mask: 0x01)                              */
#define TIMER0_SR_RST_Pos                 (12UL)                    /*!< RST (Bit 12)                                          */
#define TIMER0_SR_RST_Msk                 (0x1000UL)                /*!< RST (Bitfield-Mask: 0x01)                             */
#define TIMER0_SR_RELOAD_Pos              (14UL)                    /*!< RELOAD (Bit 14)                                       */
#define TIMER0_SR_RELOAD_Msk              (0xc000UL)                /*!< RELOAD (Bitfield-Mask: 0x03)                          */
/* ==========================================================  INT  ========================================================== */
#define TIMER0_INT_EN_Pos                 (0UL)                     /*!< EN (Bit 0)                                            */
#define TIMER0_INT_EN_Msk                 (0x1UL)                   /*!< EN (Bitfield-Mask: 0x01)                              */
#define TIMER0_INT_MODE_Pos               (4UL)                     /*!< MODE (Bit 4)                                          */
#define TIMER0_INT_MODE_Msk               (0x70UL)                  /*!< MODE (Bitfield-Mask: 0x07)                            */
/* =========================================================  COUNT  ========================================================= */
/* =========================================================  MATCH  ========================================================= */
/* ======================================================  PRESCALE_RD  ====================================================== */
/* ======================================================  PRESCALE_WR  ====================================================== */

/** @} */ /* End of group PosMask_peripherals */


/* =========================================================================================================================== */
/* ================                           Enumerated Values Peripheral Section                            ================ */
/* =========================================================================================================================== */


/** @addtogroup EnumValue_peripherals
  * @{
  */



/* =========================================================================================================================== */
/* ================                                          TIMER0                                           ================ */
/* =========================================================================================================================== */

/* ==========================================================  CR  =========================================================== */
/* ==================================================  TIMER0 CR EN [0..0]  ================================================== */
typedef enum {                                  /*!< TIMER0_CR_EN                                                              */
  TIMER0_CR_EN_Disable                 = 0,     /*!< Disable : Timer is disabled and does not operate                          */
  TIMER0_CR_EN_Enable                  = 1,     /*!< Enable : Timer is enabled and can operate                                 */
} TIMER0_CR_EN_Enum;

/* =================================================  TIMER0 CR RST [1..1]  ================================================== */
typedef enum {                                  /*!< TIMER0_CR_RST                                                             */
  TIMER0_CR_RST_No_Action              = 0,     /*!< No_Action : Write as ZERO if necessary                                    */
  TIMER0_CR_RST_Reset_Timer            = 1,     /*!< Reset_Timer : Reset the Timer                                             */
} TIMER0_CR_RST_Enum;

/* =================================================  TIMER0 CR CNT [2..3]  ================================================== */
typedef enum {                                  /*!< TIMER0_CR_CNT                                                             */
  TIMER0_CR_CNT_Count_UP               = 0,     /*!< Count_UP : Timer Counts UO and wraps, if no STOP condition is
                                                     set                                                                       */
  TIMER0_CR_CNT_Count_DOWN             = 1,     /*!< Count_DOWN : Timer Counts DOWN and wraps, if no STOP condition
                                                     is set                                                                    */
  TIMER0_CR_CNT_Toggle                 = 2,     /*!< Toggle : Timer Counts up to MAX, then DOWN to ZERO, if no STOP
                                                     condition is set                                                          */
} TIMER0_CR_CNT_Enum;

/* =================================================  TIMER0 CR MODE [4..6]  ================================================= */
typedef enum {                                  /*!< TIMER0_CR_MODE                                                            */
  TIMER0_CR_MODE_Continous             = 0,     /*!< Continous : Timer runs continously                                        */
  TIMER0_CR_MODE_Single_ZERO_MAX       = 1,     /*!< Single_ZERO_MAX : Timer counts to 0x00 or 0xFFFFFFFF (depending
                                                     on CNT) and stops                                                         */
  TIMER0_CR_MODE_Single_MATCH          = 2,     /*!< Single_MATCH : Timer counts to the Value of MATCH Register and
                                                     stops                                                                     */
  TIMER0_CR_MODE_Reload_ZERO_MAX       = 3,     /*!< Reload_ZERO_MAX : Timer counts to 0x00 or 0xFFFFFFFF (depending
                                                     on CNT), loads the RELOAD Value and continues                             */
  TIMER0_CR_MODE_Reload_MATCH          = 4,     /*!< Reload_MATCH : Timer counts to the Value of MATCH Register,
                                                     loads the RELOAD Value and continues                                      */
} TIMER0_CR_MODE_Enum;

/* =================================================  TIMER0 CR PSC [7..7]  ================================================== */
typedef enum {                                  /*!< TIMER0_CR_PSC                                                             */
  TIMER0_CR_PSC_Disabled               = 0,     /*!< Disabled : Prescaler is not used                                          */
  TIMER0_CR_PSC_Enabled                = 1,     /*!< Enabled : Prescaler is used as divider                                    */
} TIMER0_CR_PSC_Enum;

/* ===============================================  TIMER0 CR CNTSRC [8..11]  ================================================ */
typedef enum {                                  /*!< TIMER0_CR_CNTSRC                                                          */
  TIMER0_CR_CNTSRC_CAP_SRC             = 0,     /*!< CAP_SRC : Capture Source is used directly                                 */
  TIMER0_CR_CNTSRC_CAP_SRC_div2        = 1,     /*!< CAP_SRC_div2 : Capture Source is divided by 2                             */
  TIMER0_CR_CNTSRC_CAP_SRC_div4        = 2,     /*!< CAP_SRC_div4 : Capture Source is divided by 4                             */
  TIMER0_CR_CNTSRC_CAP_SRC_div8        = 3,     /*!< CAP_SRC_div8 : Capture Source is divided by 8                             */
  TIMER0_CR_CNTSRC_CAP_SRC_div16       = 4,     /*!< CAP_SRC_div16 : Capture Source is divided by 16                           */
  TIMER0_CR_CNTSRC_CAP_SRC_div32       = 5,     /*!< CAP_SRC_div32 : Capture Source is divided by 32                           */
  TIMER0_CR_CNTSRC_CAP_SRC_div64       = 6,     /*!< CAP_SRC_div64 : Capture Source is divided by 64                           */
  TIMER0_CR_CNTSRC_CAP_SRC_div128      = 7,     /*!< CAP_SRC_div128 : Capture Source is divided by 128                         */
  TIMER0_CR_CNTSRC_CAP_SRC_div256      = 8,     /*!< CAP_SRC_div256 : Capture Source is divided by 256                         */
} TIMER0_CR_CNTSRC_Enum;

/* ===============================================  TIMER0 CR CAPSRC [12..15]  =============================================== */
typedef enum {                                  /*!< TIMER0_CR_CAPSRC                                                          */
  TIMER0_CR_CAPSRC_CClk                = 0,     /*!< CClk : Core Clock                                                         */
  TIMER0_CR_CAPSRC_GPIOA_0             = 1,     /*!< GPIOA_0 : GPIO A, PIN 0                                                   */
  TIMER0_CR_CAPSRC_GPIOA_1             = 2,     /*!< GPIOA_1 : GPIO A, PIN 1                                                   */
  TIMER0_CR_CAPSRC_GPIOA_2             = 3,     /*!< GPIOA_2 : GPIO A, PIN 2                                                   */
  TIMER0_CR_CAPSRC_GPIOA_3             = 4,     /*!< GPIOA_3 : GPIO A, PIN 3                                                   */
  TIMER0_CR_CAPSRC_GPIOA_4             = 5,     /*!< GPIOA_4 : GPIO A, PIN 4                                                   */
  TIMER0_CR_CAPSRC_GPIOA_5             = 6,     /*!< GPIOA_5 : GPIO A, PIN 5                                                   */
  TIMER0_CR_CAPSRC_GPIOA_6             = 7,     /*!< GPIOA_6 : GPIO A, PIN 6                                                   */
  TIMER0_CR_CAPSRC_GPIOA_7             = 8,     /*!< GPIOA_7 : GPIO A, PIN 7                                                   */
  TIMER0_CR_CAPSRC_GPIOB_0             = 9,     /*!< GPIOB_0 : GPIO B, PIN 0                                                   */
  TIMER0_CR_CAPSRC_GPIOB_1             = 10,    /*!< GPIOB_1 : GPIO B, PIN 1                                                   */
  TIMER0_CR_CAPSRC_GPIOB_2             = 11,    /*!< GPIOB_2 : GPIO B, PIN 2                                                   */
  TIMER0_CR_CAPSRC_GPIOB_3             = 12,    /*!< GPIOB_3 : GPIO B, PIN 3                                                   */
  TIMER0_CR_CAPSRC_GPIOC_0             = 13,    /*!< GPIOC_0 : GPIO C, PIN 0                                                   */
  TIMER0_CR_CAPSRC_GPIOC_5             = 14,    /*!< GPIOC_5 : GPIO C, PIN 1                                                   */
  TIMER0_CR_CAPSRC_GPIOC_6             = 15,    /*!< GPIOC_6 : GPIO C, PIN 2                                                   */
} TIMER0_CR_CAPSRC_Enum;

/* ==============================================  TIMER0 CR CAPEDGE [16..17]  =============================================== */
typedef enum {                                  /*!< TIMER0_CR_CAPEDGE                                                         */
  TIMER0_CR_CAPEDGE_RISING             = 0,     /*!< RISING : Only rising edges result in a counter increment or
                                                     decrement                                                                 */
  TIMER0_CR_CAPEDGE_FALLING            = 1,     /*!< FALLING : Only falling edges result in a counter increment or
                                                     decrement                                                                 */
  TIMER0_CR_CAPEDGE_BOTH               = 2,     /*!< BOTH : Rising and falling edges result in a counter increment
                                                     or decrement                                                              */
} TIMER0_CR_CAPEDGE_Enum;

/* ===============================================  TIMER0 CR TRGEXT [20..21]  =============================================== */
typedef enum {                                  /*!< TIMER0_CR_TRGEXT                                                          */
  TIMER0_CR_TRGEXT_NONE                = 0,     /*!< NONE : No Trigger is emitted                                              */
  TIMER0_CR_TRGEXT_DMA1                = 1,     /*!< DMA1 : DMA Controller 1 is triggered, dependant on MODE                   */
  TIMER0_CR_TRGEXT_DMA2                = 2,     /*!< DMA2 : DMA Controller 2 is triggered, dependant on MODE                   */
  TIMER0_CR_TRGEXT_UART                = 3,     /*!< UART : UART is triggered, dependant on MODE                               */
} TIMER0_CR_TRGEXT_Enum;

/* ===============================================  TIMER0 CR RELOAD [24..25]  =============================================== */
typedef enum {                                  /*!< TIMER0_CR_RELOAD                                                          */
  TIMER0_CR_RELOAD_RELOAD0             = 0,     /*!< RELOAD0 : Selects Reload Register number 0                                */
  TIMER0_CR_RELOAD_RELOAD1             = 1,     /*!< RELOAD1 : Selects Reload Register number 1                                */
  TIMER0_CR_RELOAD_RELOAD2             = 2,     /*!< RELOAD2 : Selects Reload Register number 2                                */
  TIMER0_CR_RELOAD_RELOAD3             = 3,     /*!< RELOAD3 : Selects Reload Register number 3                                */
} TIMER0_CR_RELOAD_Enum;

/* ================================================  TIMER0 CR IDR [26..27]  ================================================= */
typedef enum {                                  /*!< TIMER0_CR_IDR                                                             */
  TIMER0_CR_IDR_KEEP                   = 0,     /*!< KEEP : Reload Register number does not change automatically               */
  TIMER0_CR_IDR_INCREMENT              = 1,     /*!< INCREMENT : Reload Register number is incremented on each match           */
  TIMER0_CR_IDR_DECREMENT              = 2,     /*!< DECREMENT : Reload Register number is decremented on each match           */
} TIMER0_CR_IDR_Enum;

/* =================================================  TIMER0 CR S [31..31]  ================================================== */
typedef enum {                                  /*!< TIMER0_CR_S                                                               */
  TIMER0_CR_S_STOP                     = 0,     /*!< STOP : Timer / Counter is stopped                                         */
  TIMER0_CR_S_START                    = 1,     /*!< START : Timer / Counter is started                                        */
} TIMER0_CR_S_Enum;

/* ==========================================================  SR  =========================================================== */
/* =================================================  TIMER0 SR RUN [0..0]  ================================================== */
typedef enum {                                  /*!< TIMER0_SR_RUN                                                             */
  TIMER0_SR_RUN_Stopped                = 0,     /*!< Stopped : Timer is not running                                            */
  TIMER0_SR_RUN_Running                = 1,     /*!< Running : Timer is running                                                */
} TIMER0_SR_RUN_Enum;

/* ================================================  TIMER0 SR MATCH [8..8]  ================================================= */
typedef enum {                                  /*!< TIMER0_SR_MATCH                                                           */
  TIMER0_SR_MATCH_No_Match             = 0,     /*!< No_Match : The MATCH condition was not hit                                */
  TIMER0_SR_MATCH_Match_Hit            = 1,     /*!< Match_Hit : The MATCH condition was hit                                   */
} TIMER0_SR_MATCH_Enum;

/* ==================================================  TIMER0 SR UN [9..9]  ================================================== */
typedef enum {                                  /*!< TIMER0_SR_UN                                                              */
  TIMER0_SR_UN_No_Underflow            = 0,     /*!< No_Underflow : No underflow occured since last clear                      */
  TIMER0_SR_UN_Underflow               = 1,     /*!< Underflow : A minimum of one underflow occured since last clear           */
} TIMER0_SR_UN_Enum;

/* =================================================  TIMER0 SR OV [10..10]  ================================================= */
typedef enum {                                  /*!< TIMER0_SR_OV                                                              */
  TIMER0_SR_OV_No_Overflow             = 0,     /*!< No_Overflow : No overflow occured since last clear                        */
  TIMER0_SR_OV_Overflow_occured        = 1,     /*!< Overflow_occured : A minimum of one overflow occured since last
                                                     clear                                                                     */
} TIMER0_SR_OV_Enum;

/* ================================================  TIMER0 SR RST [12..12]  ================================================= */
typedef enum {                                  /*!< TIMER0_SR_RST                                                             */
  TIMER0_SR_RST_Ready                  = 0,     /*!< Ready : Timer is not in RESET state and can operate                       */
  TIMER0_SR_RST_In_Reset               = 1,     /*!< In_Reset : Timer is in RESET state and can not operate                    */
} TIMER0_SR_RST_Enum;

/* ===============================================  TIMER0 SR RELOAD [14..15]  =============================================== */
typedef enum {                                  /*!< TIMER0_SR_RELOAD                                                          */
  TIMER0_SR_RELOAD_RELOAD0             = 0,     /*!< RELOAD0 : Reload Register number 0 is active                              */
  TIMER0_SR_RELOAD_RELOAD1             = 1,     /*!< RELOAD1 : Reload Register number 1 is active                              */
  TIMER0_SR_RELOAD_RELOAD2             = 2,     /*!< RELOAD2 : Reload Register number 2 is active                              */
  TIMER0_SR_RELOAD_RELOAD3             = 3,     /*!< RELOAD3 : Reload Register number 3 is active                              */
} TIMER0_SR_RELOAD_Enum;

/* ==========================================================  INT  ========================================================== */
/* =================================================  TIMER0 INT EN [0..0]  ================================================== */
typedef enum {                                  /*!< TIMER0_INT_EN                                                             */
  TIMER0_INT_EN_Disabled               = 0,     /*!< Disabled : Timer does not generate Interrupts                             */
  TIMER0_INT_EN_Enable                 = 1,     /*!< Enable : Timer triggers the TIMERn Interrupt                              */
} TIMER0_INT_EN_Enum;

/* ================================================  TIMER0 INT MODE [4..6]  ================================================= */
typedef enum {                                  /*!< TIMER0_INT_MODE                                                           */
  TIMER0_INT_MODE_Match                = 0,     /*!< Match : Timer generates an Interrupt when the MATCH condition
                                                     is hit                                                                    */
  TIMER0_INT_MODE_Underflow            = 1,     /*!< Underflow : Timer generates an Interrupt when it underflows               */
  TIMER0_INT_MODE_Overflow             = 2,     /*!< Overflow : Timer generates an Interrupt when it overflows                 */
} TIMER0_INT_MODE_Enum;

/* =========================================================  COUNT  ========================================================= */
/* =========================================================  MATCH  ========================================================= */
/* ======================================================  PRESCALE_RD  ====================================================== */
/* ======================================================  PRESCALE_WR  ====================================================== */
/* ========================================================  RELOAD  ========================================================= */

/** @} */ /* End of group EnumValue_peripherals */


#ifdef __cplusplus
}
#endif

#endif /* ARM_EXAMPLE_H */


/** @} */ /* End of group ARM_Example */

/** @} */ /* End of group ARM Ltd. */
